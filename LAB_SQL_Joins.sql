-- LAB | SQL Joins 
USE sakila;

-- 1.  List the number of films per category.

SELECT c.name, COUNT(film_id) AS 'the_name_of_films' FROM category AS c
JOIN film_category AS f
ON c.category_id = f.category_id
GROUP BY c.category_id;


-- 2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, ci.city, co.country FROM store AS s
JOIN address AS a
ON s.address_id = a.address_id
JOIN city AS ci
ON a.city_id = ci.city_id
JOIN country AS co
ON ci.country_id = co.country_id;

-- 3 Calculate the total revenue generated by each store in dollars.

SELECT s.store_id, CONCAT('$', SUM(p.amount)) AS total_revenue FROM store AS s 
LEFT JOIN payment AS p
ON s.manager_staff_id = p.staff_id
GROUP BY s.store_id;

-- 4 Determine the average running time of films for each category.

SELECT c.name, CONCAT(round(AVG(f.length),0),' min.')  AS 'Average_running_time' FROM film AS f
LEFT JOIN film_category AS fil_cat
ON f.film_id = fil_cat.film_id
LEFT JOIN category AS c
ON fil_cat.category_id = c.category_id
GROUP BY c.name;

-- 5 Identify the film categories with the longest average running time.

SELECT c.name, CONCAT(round(AVG(f.length),0),' min.') AS 'longest_running_time' FROM film AS f
LEFT JOIN film_category AS fil_cat
ON f.film_id = fil_cat.film_id
LEFT JOIN category AS c
ON fil_cat.category_id = c.category_id
GROUP BY c.name
ORDER BY CONCAT(round(AVG(f.length),0),' min.') DESC
LIMIT 1;

-- 6 Display the top 10 most frequently rented movies in descending order.

SELECT f.title, SUM(r.inventory_id) AS 'the_number_of rent' FROM rental AS r
LEFT JOIN inventory AS i
ON r.inventory_id = i.inventory_id
LEFT JOIN film AS f
ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY SUM(r.inventory_id) DESC
LIMIT 10;


-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT i.store_id, f.title, r.rental_id, i.inventory_id FROM rental AS r
LEFT JOIN inventory AS i
ON r.inventory_id = i.inventory_id
LEFT JOIN film AS f
ON i.film_id = f.film_id
WHERE i.store_id = 1 AND f.title = "Academy Dinosaur" AND r.rental_id is not null;



-- or --

SELECT 
CASE 
WHEN r.rental_id is not null THEN "Yes"
ELSE "No"
END AS 'result'
FROM rental AS r
LEFT JOIN inventory AS i
ON r.inventory_id = i.inventory_id
LEFT JOIN film AS f
ON i.film_id = f.film_id
WHERE i.store_id = 1 AND f.title = "Academy Dinosaur" AND r.rental_id is not null
LIMIT 1;


